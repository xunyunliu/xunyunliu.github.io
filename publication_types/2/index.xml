<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2 on Xunyun Liu - PhD Candidate</title>
    <link>https://xunyunliu.github.io/publication_types/2/</link>
    <description>Recent content in 2 on Xunyun Liu - PhD Candidate</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Xunyun Liu</copyright>
    <lastBuildDate>Fri, 28 Jul 2017 15:19:31 +1000</lastBuildDate>
    <atom:link href="/publication_types/2/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A Stepwise Auto-Profiling Method for Performance Optimization of Streaming Applications</title>
      <link>https://xunyunliu.github.io/publication/profiling/</link>
      <pubDate>Fri, 28 Jul 2017 15:19:31 +1000</pubDate>
      
      <guid>https://xunyunliu.github.io/publication/profiling/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Data stream management systems (DSMSs) are scalable, highly available, and fault-tolerant systems that aggregate and analyze real-time data in motion. To continuously perform analytics on the fly within the stream, state-of-the-art DSMSs host streaming applications as a set of inter-connected operators, with each operator encapsulating the semantic of a specific operation. For parallel execution on a particular platform, these operators need to be appropriately replicated in multiple instances that split and process the workload simultaneously. Because the way operators are partitioned affects the resulting performance of streaming applications, it is essential for DSMSs to have a method to compare different operators and make holistic replication decisions to avoid performance bottlenecks and resource wastage. To this end, we propose a stepwise profiling approach to optimize application performance on a given execution platform. It automatically scales distributed computations over streams based on application features and processing power of provisioned resources, and builds the relationship between provisioned resources and application performance metrics to evaluate the efficiency of the resulting configuration. Experimental results confirm that the proposed approach successfully fulfils its goals with minimal profiling overhead.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance-Oriented Deployment of Streaming Applications on Cloud</title>
      <link>https://xunyunliu.github.io/publication/performance/</link>
      <pubDate>Sat, 10 Jun 2017 20:19:18 +1000</pubDate>
      
      <guid>https://xunyunliu.github.io/publication/performance/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Performance of streaming applications are significantly impacted by the deployment decisions made at infrastructure level, i.e., number and configuration of resources allocated for each functional unit of the application. The current deployment practices are mostly platform-oriented, meaning that the deployment configuration is tuned to a static resource-set environment and thus is inflexible to use in cloud with an on-demand resource pool. In this paper, we propose P-Deployer, a deployment framework that enables streaming applications to run on IaaS clouds with satisfactory performance and minimal resource consumption. It achieves performance-oriented, cost-efficient and automated deployment by holistically optimizing the decisions of operator parallelization, resource provisioning, and task mapping. Using a Monitor-Analyze-Plan-Execute (MAPE) architecture, P-Deployer iteratively builds the connection between performance outcome and resource consumption through task profiling and models the deployment problem as a bin-packing variant. Extensive experiments using both synthetic and real-world streaming applications have shown the correctness and scalability of our approach, and demonstrated its superiority compared to platform-oriented methods in terms of resource cost.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
